extends Node3D
#DiceManager
class_name DiceManager

var camera: Camera3D = null


signal all_dice_stopped(values: Array)
signal dice_rolling_started

const DICE_SCENE = preload("res://scenes/dice.tscn")
const NUM_DICE = 6

var dice_array: Array = []
var dice_stopped_count: int = 0
var is_rolling: bool = false
var selected_dice: Array = []  # Doƒçasn√Ω v√Ωbƒõr (klik√°n√≠ my≈°√≠ v manu√°ln√≠m re≈æimu)
var banked_dice: Array = []  # Permanentnƒõ vybran√© kostky v aktu√°ln√≠m kole
var rolling_dice_indices: Array = []  # Indexy kostek, kter√© se pr√°vƒõ kut√°l√≠
var last_values: Array = [0, 0, 0, 0, 0, 0]  # Posledn√≠ hodnoty v≈°ech kostek
var first_roll: bool = true  # Je to prvn√≠ hod v kole?

# Reference na kel√≠mek a kameru (nastav√≠≈° v _ready nebo z venku)
var dice_cup: Node3D = null
var audio_manager: Node = null
var effects_manager: Node3D = null
var use_cup_animation: bool = true  # Zapni/vypni animace kel√≠mku
var use_camera_animations: bool = true  # Zapni/vypni pohyby kamery

# Pozice pro h√°zen√≠ kostek
var spawn_position = Vector3(0, 2, 0)
var spawn_spread = 2.0
var banked_values: Dictionary = {}  # Uchov√° hodnoty zabanovan√Ωch kostek

func _ready():
	create_dice()  # Kostky se vytvo≈ô√≠ u≈æ schovan√©
	
	# Najdi kel√≠mek a kameru ve sc√©nƒõ (pokud existuj√≠)
	var parent = get_parent()
	if parent.has_node("DiceCup"):
		dice_cup = parent.get_node("DiceCup")
		print("ü•§ Kel√≠mek nalezen!")
	if parent.has_node("Table"):
		var table = parent.get_node("Table")
		print("\nü™µ St≈Øl:")
		print("   Pozice: ", table.global_position)
		if table is StaticBody3D:
			print("   Collision layer: ", table.collision_layer)
			print("   Collision mask: ", table.collision_mask)
	else:
		print("\n‚ö†Ô∏è ST≈ÆL NENALEZEN! Kostky nemaj√≠ kam dopadnout!")
	
	print("üîç ==========================================\n")
	
	if parent.has_node("Camera3D"):
		camera = parent.get_node("Camera3D")
		print("üì∑ Kamera nalezena!")
	
	# Najdi audio manager (global nebo v parent)
	if has_node("/root/AudioManager"):
		audio_manager = get_node("/root/AudioManager")
		print("üîä Audio manager nalezen!")
	elif parent.has_node("AudioManager"):
		audio_manager = parent.get_node("AudioManager")
		print("üîä Audio manager nalezen!")
	
	# Najdi effects manager
	if parent.has_node("DiceEffects"):
		effects_manager = parent.get_node("DiceEffects")
		print("‚ú® Effects manager nalezen!")

	print("\nüîç ========== DEBUG KONTROLA SC√âNY ==========")
	print("üìç DiceManager pozice: ", global_position)
	print("üìç DiceManager rotace: ", rotation_degrees)
	
	if dice_array.size() > 0:
		var test_dice = dice_array[0]
		print("\nüé≤ Test kostka [0]:")
		print("   Lok√°ln√≠ pozice: ", test_dice.position)
		print("   Glob√°ln√≠ pozice: ", test_dice.global_position)
		print("   Visible: ", test_dice.visible)
		print("   Freeze: ", test_dice.freeze)
		print("   Collision layer: ", test_dice.collision_layer)
		print("   Collision mask: ", test_dice.collision_mask)
		
		if has_node("/root/Main/Camera3D"):
			camera = get_node("/root/Main/Camera3D")

func create_dice():
	"""Vytvo≈ô 6 kostek"""
	for i in range(NUM_DICE):
		var dice = DICE_SCENE.instantiate()
		add_child(dice)
		
		# Nastav poƒç√°teƒçn√≠ pozici
		var row = i / 3.0
		var col = i % 3
		var offset = Vector3(
			float(col - 1) * 1.5,
			0,
			float(row) * 1.5 - 0.75
		)
		dice.position = spawn_position + offset
		
		# SKRYJ kostku ihned (je v kel√≠mku)
		dice.visible = false
		dice.freeze = true
		
		# P≈ôipoj sign√°ly
		dice.dice_stopped.connect(_on_dice_stopped)
		dice.dice_rolling.connect(_on_dice_rolling)
		dice.dice_clicked.connect(_on_dice_clicked)
		
		dice_array.append(dice)
	
	print("üé≤ Vytvo≈ôeno ", NUM_DICE, " kostek (schovan√© v kel√≠mku)")

func roll_all_dice(banked_indices: Array = []):
	"""
	Hoƒè kostkami.
	banked_indices: indexy kostek, kter√© NEMAJ√ç b√Ωt hozeny (u≈æ jsou zabanovan√©)
	Pokud je pr√°zdn√©, hoƒè v≈°emi.
	"""
	if is_rolling:
		return
	
	is_rolling = true
	dice_stopped_count = 0
	rolling_dice_indices.clear()
	dice_rolling_started.emit()
	
	# Zjisti, kter√Ωmi kostkami h√°zet
	var dice_to_roll_indices = []
	
	print("===== H√ÅZEN√ç KOSTEK =====")
	print("üîí Zabanovan√© (NEH√ÅZET): ", banked_indices)
	
	if banked_indices.is_empty():
		# Hoƒè v≈°emi kostkami
		for i in range(dice_array.size()):
			dice_to_roll_indices.append(i)
			rolling_dice_indices.append(i)
	else:
		# Hoƒè jen tƒõmi, kter√© NEJSOU v banked_indices
		for i in range(dice_array.size()):
			if not banked_indices.has(i):
				dice_to_roll_indices.append(i)
				rolling_dice_indices.append(i)
	
	print("üé≤ H√°z√≠m kostkami (indexy): ", rolling_dice_indices)
	print("=========================")
	
	# Pokud pou≈æ√≠v√°me kel√≠mek a h√°z√≠me v≈°emi kostkami (prvn√≠ hod nebo hot hand)
	if use_cup_animation and dice_cup and banked_indices.is_empty() and first_roll:
		first_roll = false  # U≈æ to nen√≠ prvn√≠ hod
		perform_cup_animation(dice_to_roll_indices)
		
	else:
		# ‚ö†Ô∏è KL√çƒåOV√Å ZMƒöNA - rehod tak√© pou≈æ√≠v√° kel√≠mek!
		perform_classic_roll(dice_to_roll_indices)

func perform_cup_animation(indices: Array):
	"""Animace s kel√≠mkem"""
	print("ü•§ Spou≈°t√≠m animaci h√°zen√≠...")
	
	if audio_manager and audio_manager.has_method("play_cup_shake"):
		audio_manager.play_cup_shake()
	
	if camera and camera.has_method("move_to_shake_view") and use_camera_animations:
		camera.move_to_shake_view()
		await get_tree().create_timer(0.3).timeout
	
	if dice_cup and dice_cup.has_method("shake_and_throw"):
		# ‚úÖ OPRAVENO: Spus≈• animaci BEZ ulo≈æen√≠ - bƒõ≈æ√≠ na pozad√≠
		dice_cup.shake_and_throw()
		
		# ƒåek√°me na sign√°l
		var release_position = await dice_cup.dice_released
		
		# Zobraz kostky
		show_and_throw_dice(indices, release_position)
		
		# ƒåekej aby se animace skonƒçila
		await get_tree().create_timer(4.0).timeout
	else:
		print("‚ö†Ô∏è Kel√≠mek nem√° metodu shake_and_throw!")
		perform_simple_throw(indices)
	
	# Kamera na kostky
	if camera and camera.has_method("move_to_focused") and use_camera_animations:
		camera.move_to_focused()
		
func reset_all_dice_for_reroll():
	"""Resetuj v≈°echny kostky do poƒç√°teƒçn√≠ho stavu - KROMƒö zabanovan√Ωch"""
	print("üîÑ Kompletn√≠ reset kostek pro rehod (kromƒõ zabanovan√Ωch)...")
	
	for i in range(dice_array.size()):
		# ‚ö†Ô∏è P≈òESKOƒå zabanovan√© kostky - ty u≈æ jsou stranou!
		if banked_dice.has(i):
			print("‚è≠Ô∏è Kostka ", i, " je zabanovan√°, ponech√°v√°m stranou")
			continue
		
		var dice = dice_array[i]
		
		# √öpln√Ω reset fyziky
		dice.freeze = true
		dice.linear_velocity = Vector3.ZERO
		dice.angular_velocity = Vector3.ZERO
		dice.visible = false
		dice.is_rolling = false
		dice.settle_timer = 0.0
		
		# Reset pozice na p≈Øvodn√≠ m√≠sto (v kel√≠mku)
		var row = i / 3.0
		var col = i % 3
		var offset = Vector3(
			float(col - 1) * 1.5,
			0,
			float(row) * 1.5 - 0.75
		)
		dice.position = spawn_position + offset
		dice.rotation = Vector3.ZERO
		
		# Skryj prstenec
		dice.set_selected(false)
	
	print("‚úÖ Kostky resetov√°ny (zabanovan√© z≈Østaly stranou)")

func perform_classic_roll(indices: Array):
	"""Klasick√© h√°zen√≠ - synchronizace s kel√≠mkem"""
	print("üé≤ Rehod - synchronizuji s kel√≠mkem...")
	
	reset_all_dice_for_reroll()
	await get_tree().create_timer(0.1).timeout
	
	if dice_cup and dice_cup.has_method("shake_and_throw"):
		print("   ‚Üí Spou≈°t√≠m shake_and_throw()...")
		
		# ‚úÖ OPRAVENO: Spus≈• animaci BEZ ulo≈æen√≠ - bƒõ≈æ√≠ na pozad√≠
		dice_cup.shake_and_throw()
		
		print("   ‚Üí ƒåek√°m na signal dice_released...")
		var release_position = await dice_cup.dice_released
		
		print("   ‚Üí Signal p≈ôijat! Spawnuji kostky...")
		show_and_throw_dice(indices, release_position)
		
		# ƒåekej aby se animace skonƒçila
		await get_tree().create_timer(4.0).timeout
		
		if camera and camera.has_method("move_to_focused"):
			camera.move_to_focused()
	else:
		print("‚ö†Ô∏è Kel√≠mek nedostupn√Ω, fallback...")
		perform_simple_throw(indices)
	
	print("‚úÖ Rehod hotov")

func perform_simple_throw(indices: Array):
	"""Jednoduch√Ω hod bez kel√≠mku - fallback"""
	print("üé≤ Jednoduch√Ω hod ", indices.size(), " kostek (bez kel√≠mku)...")
	
	# Zvuk h√°zen√≠
	if audio_manager and audio_manager.has_method("play_dice_roll"):
		audio_manager.play_dice_roll()
	
	# Zobraz a aktivuj kostky
	for idx in indices:
		if idx < dice_array.size():
			var dice = dice_array[idx]
			
			dice.global_position = Vector3(
				randf_range(-3.0, 3.0),
				5.0,
				randf_range(-3.0, 3.0)
			)
			
			dice.rotation = Vector3(
				randf_range(0, TAU),
				randf_range(0, TAU),
				randf_range(0, TAU)
			)
			
			dice.visible = true
			dice.freeze = false
			dice.linear_velocity = Vector3.ZERO
			dice.angular_velocity = Vector3.ZERO
	
	# Poƒçkej aby se fyzika probudila
	await get_tree().process_frame
	
	# Hoƒè v≈°emi najednou
	for idx in indices:
		if idx < dice_array.size():
			var dice = dice_array[idx]
			var strength = randf_range(3.0, 5.0)
			dice.roll(strength)
	
	# Oznaƒç ≈æe kostky se kut√°l√≠
	is_rolling = true
	dice_stopped_count = 0
	dice_rolling_started.emit()
	
	print("‚úÖ V≈°echny kostky hozeny!")

func show_and_throw_dice(indices: Array, cup_release_position: Vector3 = Vector3.ZERO):
	"""
	Realistick√© vysyp√°n√≠ kostek z kel√≠mku - OPRAVEN√Å VERZE
	Kostky padaj√≠ z vrcholu oblouku smƒõrem dol≈Ø na st≈Øl
	"""
	
	if cup_release_position == Vector3.ZERO:
		cup_release_position = Vector3(0, 0, 0)  # Fallback
	
	print("\nüé≤ === VYSYP√ÅN√ç KOSTEK ===")
	print("   Release pozice kel√≠mku: ", cup_release_position)
	print("   Poƒçet kostek: ", indices.size())
	
	# Poƒçkej na dokonƒçen√≠ animace kel√≠mku (mal√° pauza)
	await get_tree().create_timer(0.1).timeout
	
	# === SPAWN POINT - otvor kel√≠mku ===
	# Kel√≠mek je silnƒõ otoƒçen√Ω (~70¬∞), otvor m√≠≈ô√≠ dol≈Ø
	var spawn_point = cup_release_position
	
	spawn_point = cup_release_position + Vector3(0, -1.5, 4.5)

	
	# Bezpeƒçnostn√≠ kontrola - spawn point mus√≠ b√Ωt NAD stolem!
	if spawn_point.y < 2.0:
		print("‚ö†Ô∏è Spawn point p≈ô√≠li≈° n√≠zko! Korihuji...")
		spawn_point.y = 5.0
	
	print("   Spawn point (st≈ôed stolu): ", spawn_point)
	print("   St≈Øl je na: (0, 0, 0)")
	
	# === VYSYP√ÅN√ç KOSTEK POSTUPNƒö ===
	for i in range(indices.size()):
		var idx = indices[i]
		if idx >= dice_array.size():
			continue
		
		var dice = dice_array[idx]
		
		# 1. Aktivuj kostku
		dice.visible = true
		dice.freeze = false
		
		# 2. Spawn v TƒöSN√â skupince z otvoru (mal√Ω rozptyl!)
		var spread = Vector3(
			randf_range(-0.1, 0.1),   # ‚¨ÖÔ∏è ZMƒöNƒöNO: Men≈°√≠ rozptyl X
			randf_range(-0.05, 0.05), # ‚¨ÖÔ∏è ZMƒöNƒöNO: Men≈°√≠ rozptyl Y
			randf_range(-0.1, 0.1)    # ‚¨ÖÔ∏è ZMƒöNƒöNO: Men≈°√≠ rozptyl Z
		)
		dice.global_position = spawn_point + spread
		
		# 3. N√°hodn√° poƒç√°teƒçn√≠ rotace
		dice.rotation = Vector3(
			randf_range(0, TAU),
			randf_range(0, TAU),
			randf_range(0, TAU)
		)
		
		# 4. SMƒöR P√ÅDU - P≈ò√çMO DOL≈Æ do st≈ôedu stolu!
		var table_center = Vector3(0, 0, 0)
		var to_center = (table_center - spawn_point).normalized()
		
		# Smƒõr: 60% dol≈Ø + 40% do st≈ôedu = dopad bl√≠zko st≈ôedu
		var throw_direction = (
			Vector3(0, -1, 0) * 0.6 +  # ‚¨ÖÔ∏è ZMƒöNƒöNO: M√©nƒõ dol≈Ø
			to_center * 0.4            # ‚¨ÖÔ∏è ZMƒöNƒöNO: V√≠ce do st≈ôedu
		).normalized()
		
		# Mal√Ω rozptyl aby nepadly v≈°echny na stejn√© m√≠sto
		throw_direction += Vector3(
			randf_range(-0.3, 0.3),    # ‚¨ÖÔ∏è ZMƒöNƒöNO: Vƒõt≈°√≠ rozptyl
			randf_range(-0.05, 0.0),   # M√≠rnƒõ dol≈Ø
			randf_range(-0.3, 0.3)     # ‚¨ÖÔ∏è ZMƒöNƒöNO: Vƒõt≈°√≠ rozptyl
		)
		throw_direction = throw_direction.normalized()
		
		# 5. S√çLA HODU - m√≠rnƒõj≈°√≠ aby dopadly bl√≠≈æ
		var throw_force = randf_range(6.0, 9.0)  # ‚¨ÖÔ∏è ZMƒöNƒöNO: M√©nƒõ s√≠ly!
		dice.linear_velocity = throw_direction * throw_force
		
		# 6. ROTACE - realistick√© kut√°len√≠
		dice.angular_velocity = Vector3(
			randf_range(-20, 20),
			randf_range(-20, 20),
			randf_range(-15, 15)
		)
		
		# 7. Oznaƒç ≈æe se kut√°l√≠
		dice.start_rolling()
		
		print("   ‚úì Kostka ", idx, " vysyp√°na: pos=", dice.global_position.y)
		
		# Rychl√° pauza mezi kostkami (realistick√© vysyp√°v√°n√≠)
		await get_tree().create_timer(0.1).timeout  # ‚¨ÖÔ∏è ZMƒöNƒöNO: Rychlej≈°√≠
	
	# === FINALIZACE ===
	is_rolling = true
	dice_stopped_count = 0
	dice_rolling_started.emit()
	
	print("‚úÖ V≈°echny kostky vysyp√°ny a padaj√≠!")
	print("=========================\n")


func _on_dice_rolling():
	pass  # Kostka zaƒçala kut√°len√≠

func _on_dice_stopped(_value: int):
	dice_stopped_count += 1
	
	# Zvuk dopadu
	if audio_manager and audio_manager.has_method("play_dice_impact"):
		audio_manager.play_dice_impact()
	
	# Zkontroluj v≈°echny kostky
	if dice_stopped_count >= rolling_dice_indices.size():
		is_rolling = false
		
		# ‚ö†Ô∏è OPRAVA - Aktualizuj hodnoty JEN pro nehozen√© kostky
		for idx in rolling_dice_indices:
			if idx < dice_array.size():
				var dice = dice_array[idx]
				
				# Bezpeƒçnostn√≠ kontrola pozice
				if dice.global_position.y < -2.0:
					print("‚ö†Ô∏è Kostka ", idx, " je mimo st≈Øl! Teleportuji...")
					dice.global_position = Vector3(
						randf_range(-3, 3),
						0.8,
						randf_range(-3, 3)
					)
					dice.linear_velocity = Vector3.ZERO
					dice.angular_velocity = Vector3.ZERO
				
				# ‚úÖ KL√çƒå - Ulo≈æ hodnotu JEN pokud NEN√ç zabanovan√°!
				if not banked_dice.has(idx):
					var val = dice.get_value()
					last_values[idx] = val if val >= 1 and val <= 6 else 1
					print("üé≤ Kostka ", idx, " nov√° hodnota: ", last_values[idx])
				else:
					# Zabanovan√° kostka - pou≈æij ULO≈ΩENOU hodnotu
					if banked_values.has(idx):
						last_values[idx] = banked_values[idx]
						print("üîí Kostka ", idx, " ZABANOVAN√Å hodnota: ", last_values[idx])
		
		print("‚úÖ V≈°echny kostky zastaveny. Hodnoty: ", last_values)
		
		all_dice_stopped.emit(last_values.duplicate())

func count_rolling_dice() -> int:
	"""Poƒçet kostek, kter√© se kut√°l√≠"""
	var count = 0
	for dice in dice_array:
		if dice.is_dice_rolling():
			count += 1
	return count if count > 0 else dice_stopped_count

func get_all_values() -> Array:
	"""Z√≠skej hodnoty v≈°ech kostek"""
	return last_values.duplicate()

func get_dice(index: int):
	"""Z√≠skej konkr√©tn√≠ kostku"""
	if index < dice_array.size():
		return dice_array[index]
	return null

func reset_positions():
	"""Resetuj pozice kostek"""
	for i in range(dice_array.size()):
		var dice = dice_array[i]
		var row = i / 3.0
		var col = i % 3
		var offset = Vector3(
			float(col - 1) * 1.5,
			0,
			float(row) * 1.5 - 0.75
		)
		dice.position = spawn_position + offset
		dice.rotation = Vector3.ZERO
		dice.linear_velocity = Vector3.ZERO
		dice.angular_velocity = Vector3.ZERO

func _on_dice_clicked(dice: RigidBody3D):
	"""Zpracuj kliknut√≠ na kostku (jen pro manu√°ln√≠ re≈æim)"""
	var dice_index = dice_array.find(dice)
	if dice_index == -1:
		return
	
	# Nelze vybrat u≈æ zabanovanou kostku
	if banked_dice.has(dice_index):
		print("‚ö†Ô∏è Kostka ", dice_index, " je u≈æ zabanovan√°!")
		return
	
	# Zvuk v√Ωbƒõru
	if audio_manager and audio_manager.has_method("play_dice_select"):
		audio_manager.play_dice_select()
	
	# Toggle v√Ωbƒõr pro manu√°ln√≠ re≈æim
	if selected_dice.has(dice_index):
		# Odeber z v√Ωbƒõru
		selected_dice.erase(dice_index)
		dice.set_selected(false)
		print("‚ûñ Odebr√°no z v√Ωbƒõru: ", dice_index)
	else:
		# P≈ôidej do v√Ωbƒõru
		selected_dice.append(dice_index)
		dice.set_selected(true)
		print("‚ûï P≈ôid√°no do v√Ωbƒõru: ", dice_index)
	
	print("üìã Doƒçasn√Ω v√Ωbƒõr: ", selected_dice)

func get_selected_dice() -> Array:
	"""Vra≈• indexy doƒçasnƒõ vybran√Ωch kostek (manu√°ln√≠ re≈æim)"""
	return selected_dice.duplicate()

func get_banked_dice() -> Array:
	"""Vra≈• indexy zabanovan√Ωch kostek"""
	return banked_dice.duplicate()

func clear_selection():
	# Vyƒçisti doƒçasn√Ω v√Ωbƒõr my≈°i
	for idx in selected_dice:
		if idx < dice_array.size():
			dice_array[idx].set_selected(false)
	
	selected_dice.clear()
	
	print("üîÑ Vyƒçi≈°tƒõn doƒçasn√Ω v√Ωbƒõr")
	print("   Zabanovan√© kostky z≈Øst√°vaj√≠: ", banked_dice)

func clear_all_for_new_turn():
	#Kompletn√≠ reset V≈†E
	print("\nüîÑ ========== NOV√ù TAH - KOMPLETN√ç RESET ==========")
	
	# 1. Vyƒçisti doƒçasn√Ω v√Ωbƒõr
	for idx in selected_dice:
		if idx < dice_array.size():
			dice_array[idx].set_selected(false)
	selected_dice.clear()
	
	# 2. Vra≈• zabanovan√© kostky zpƒõt do kel√≠mku
	for idx in banked_dice:
		if idx < dice_array.size():
			var dice = dice_array[idx]
			dice.set_selected(false)
			dice.visible = false
			dice.freeze = true
			
			# Reset pozice do kel√≠mku
			var row = idx / 3
			var col = idx % 3
			var offset = Vector3(
				float(col - 1) * 1.5,
				0,
				float(row) * 1.5 - 0.75
			)
			dice.position = spawn_position + offset
			dice.rotation = Vector3.ZERO
	
	# 3. Vyƒçisti v≈°echny arrays - TADY se ƒçist√≠ banked_dice!
	banked_dice.clear()
	first_roll = true
	rolling_dice_indices.clear()
	
	# 4. Reset hodnot
	last_values = [0, 0, 0, 0, 0, 0]
	
	# 5. Skryj v≈°echny kostky
	hide_all_dice()
	
	print("‚úÖ Kompletn√≠ reset dokonƒçen")
	print("   - V≈°echny kostky v kel√≠mku")
	print("   - Zabanovan√© kostky vyƒçi≈°tƒõny")
	print("   - P≈ôipraven na nov√Ω tah")
	print("====================================================\n")

func hide_all_dice():
	"""Skryj v≈°echny kostky (na zaƒç√°tku - jsou v kel√≠mku)"""
	for dice in dice_array:
		dice.visible = false
		dice.freeze = true
		dice.set_selected(false)
	print("üëª Schov√°no ", dice_array.size(), " kostek")

func mark_dice_as_banked(indices: Array):
	"""Oznaƒç kostky jako zabanovan√© a p≈ôesu≈à je stranou"""
	
	print("\nüíæ ========== BANKOV√ÅN√ç KOSTEK ==========")
	print("üì• Bankuji indexy: ", indices)
	print("üì¶ P≈òED bankov√°n√≠m:")
	print("   banked_dice: ", banked_dice)
	
	for idx in indices:
		if idx < dice_array.size() and not banked_dice.has(idx):
			# ‚ö†Ô∏è OPRAVA: Spoƒç√≠tej pozici P≈òED p≈ôid√°n√≠m do banked_dice!
			var banked_position_index = banked_dice.size()  # Aktu√°ln√≠ poƒçet (p≈ôed p≈ôid√°n√≠m)
			
			banked_dice.append(idx)  # Teprve TEƒé p≈ôidej
			var dice = dice_array[idx]
			
			# Zobraz prstenec
			dice.set_selected(true)
			
			# Spoƒç√≠tej pozici podle po≈ôad√≠
			var banked_position = Vector3(
				8.0,
				0.6,
				0.0 + banked_position_index * 1.8
			)
			
			# Zmraz a p≈ôesu≈à
			dice.freeze = true
			dice.linear_velocity = Vector3.ZERO
			dice.angular_velocity = Vector3.ZERO
			dice.global_position = banked_position
			dice.visible = true  # ‚ö†Ô∏è MUS√ç z≈Østat viditeln√°!
			
			print("   ‚úÖ Kostka ", idx, " zabanov√°na:")
			print("      Hodnota: ", last_values[idx])
			print("      Pozice: ", banked_position)
			print("      Visible: ", dice.visible)
			print("      Freeze: ", dice.freeze)
			print("      Selected ring: ", dice.is_selected)
	
	if audio_manager and audio_manager.has_method("play_score"):
		audio_manager.play_score()
	
	# Vyƒçisti doƒçasn√Ω v√Ωbƒõr my≈°√≠
	selected_dice.clear()
	
	print("üì¶ PO bankov√°n√≠:")
	print("   banked_dice: ", banked_dice)
	print("   Celkem zabanovan√Ωch: ", banked_dice.size(), " kostek")
	
	# Efekt
	for idx in indices:
		if effects_manager and effects_manager.has_method("play_score_effect"):
			var dice = dice_array[idx]
			effects_manager.play_score_effect(dice.global_position)
	
	print("==========================================\n")
